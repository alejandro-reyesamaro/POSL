St_ca000 := cStrategy
	oModule: OM_S, OM_R, OM_V, OM_SS, OM_D;
{
<S>
	OP.|->
	OM_S
	<S>
		OP.Cyc ( BE.LoopBnd 24000 )
		<S> 	OP.|->
				OM_R
				<S> 	OP.Cyc ( BE.LoopBnd 3 )
						<S> 	OP.|->
								<S> 	OP.|->
										<S> 	OP.|-> 
												<S> OP.|-> OM_V OM_SS </S> 
												OM_D 
										</S> OMS.IterCounter
								</S> OMS.TimeCounter
						</S>
				</S>
		</S>
	</S> 
</S>
};


single_solver := solver
{
	cStrategy: St_ca000;
	oModule: OM_S.PermRand, OM_R.Daniel, OM_V.AS, OM_SS.FirstImpr, OM_D.AlwImpr;
};

sender_solver := solver
{
	cStrategy: St_sca000;
	oModule: OM_S.PermRand, OM_R.Daniel, OM_V.AS, OM_SS.FirstImpr, OM_D.AlwImpr;
};

receiver_solver_a := solver
{
	cStrategy: St_rca000_a;
	oModule: OM_S.PermRand, OM_R.Daniel, OM_V.AS, OM_SS.BestImpr, OM_D.AlwImpr;
	oChannel: OCh.Sol;
};

receiver_solver_b := solver
{
	cStrategy: St_rca000_b;
	oModule: OM_S.PermRand, OM_R.Daniel, OM_V.AS, OM_SS.BestImpr, OM_D.AlwImpr;
	oChannel: OCh.Sol;
};

connections:

//[sender_solver.send_1] OP.--> [receiver_solver_b.Ch1]3;
[single_solver]6;
