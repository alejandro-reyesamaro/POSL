St_rcb001 := cStrategy
	oModule: OM_S, OM_R, OM_V, OM_SS1, OM_SS2, OM_D;
	oChannel: OCh;
{
<S>
	OP.|->
	OM_S
	<S>
		OP.Cyc ( BE.LoopBnd 50 )
		<S>	OP.|-> 	
				OM_R
				<S>	OP.Cyc (BE.LoopBnd 2000)
						<S>	OP.|->
								<S>	OP.|->
										<S>	OP.|->
												<S>	OP.|-> 
														OM_V 
														<S> 	OP.? (BE.SCI 30) OM_SS1 OM_SS2 </S>
												</S>
												<S> 
														OP.? (BE.LoopBnd 10)
														<S> OP.OSend (send_1) OM_D </S>
														<S> OP.Rho (0.2) OM_D OCh (Ch1) </S>
												</S>
										</S> OMS.IterCounter
								</S> OMS.TimeCounter
						</S>
				</S>
		</S>
	</S>
</S>
};

St_sca000 := cStrategy
	oModule: OM_S, OM_R;
	oChannel: OCh;
{
<S>
	OP.|->
	OM_S
	<S>
		OP.Cyc ( BE.LoopBnd 2000000 )
		<S>	
				OP.|-> 	
				<S> OP.OSend (send_1) OM_R </S> 
				<S>
					OP.NotNull OM_R OCh (Ch1)							
				</S>
		</S>
	</S>
</S>
};

sender_solver := solver
{
	cStrategy: St_sca000;
	oModule: OM_S.PermRand, OM_R.Daniel;
	oChannel: OCh.Sol;
};

receiver_solver := solver
{
	cStrategy: St_rcb001;
	oModule: OM_S.PermRand, OM_R.Daniel, OM_V.AS, OM_SS.FirstImpr, OM_SS.Rand, OM_D.AlwImpr;
	oChannel: OCh.Sol;
};

connections:

[sender_solver.send_1, receiver_solver.send_1] OP.--> [receiver_solver.Ch1, sender_solver.Ch1]3;
