St_a000 := cStrategy
	oModule: OM_S, OM_V, OM_SS, OM_D;
{
<S>
	OP.Cyc ( BE.LoopBnd 50 )
	<S> 	OP.|->
			OM_S
			<S> 	OP.Cyc ( BE.AND ( BE.LoopBnd 5000 , BE.SCI 200 ) )
					<S> 	OP.|->
							<S> 	OP.|->
									<S> 	OP.|-> 
											<S> OP.|-> OM_V OM_SS </S> 
											OM_D 
									</S> OMS.IterCounter
							</S> OMS.TimeCounter
					</S>
			</S>
	</S> 
</S>
};

St_a001 := cStrategy
	oModule: OM_S, OM_V, OM_SS1, OM_SS2, OM_D;
{
<S>
	OP.Cyc ( BE.LoopBnd 50 )
	<S>	OP.|->
			OM_S
			<S> 	OP.Cyc ( BE.AND ( BE.LoopBnd 5000 , BE.SCI 200 ) )
					<S>	OP.|->
							<S>	OP.|->
									<S>	OP.|->
											<S> 	OP.|-> 
													OM_V
													<S>
														OP.Rho (0.5) OM_SS1 OM_SS2
													</S>
											</S>
											OM_D
									</S> OMS.IterCounter
							</S> OMS.TimeCounter
					</S>
			</S>
	</S>
</S>
};

St_a010 := cStrategy
	oModule: OM_S, OM_V1, OM_V2, OM_SS, OM_D;
{
<S>
	OP.Cyc ( BE.LoopBnd 50 )
	<S>	OP.|->
			OM_S
			<S> 	OP.Cyc ( BE.AND ( BE.LoopBnd 5000 , BE.SCI 200 ) )
					<S>	OP.|->
							<S>	OP.|->
									<S>	OP.|->
											<S> 	OP.|-> 
													<S>
														OP.Rho (0.5) OM_V1 OM_V2
													</S>
													OM_SS
											</S>
											OM_D
									</S> OMS.IterCounter
							</S> OMS.TimeCounter
					</S>
			</S>
	</S>
</S>
};

St_a020 := cStrategy
	oModule: OM_S, OM_V1, OM_V2, OM_SS, OM_D;
{
<S>
	OP.Cyc ( BE.LoopBnd 50 )
	<S>	OP.|->
			OM_S
			<S>
				OP.Cyc ( BE.AND ( BE.LoopBnd 5000 , BE.SCI 200 ) )
				<S> 	OP.|->
						<S> 	OP.|->
								<S> 	OP.|->
										<S> 	OP.|-> 
												<S> OP.U OM_V1 OM_V2 </S>
												OM_SS
										</S>
										OM_D
								</S> OMS.IterCounter
						</S> OMS.TimeCounter
				</S>
			</S>
	</S>
</S>
};

St_b001 := cStrategy
	oModule: OM_S, OM_V, OM_SS1, OM_SS2, OM_D;
{
<S>
	OP.Cyc (BE.LoopBnd 50) 
	<S>
		OP.|-> 	OM_S
					<S>
						OP.Cyc ( BE.LoopBnd 7000 )
						<S>
							OP.|-> 
							<S>
								OP.|-> 
								<S> 
									OP.|-> 	OM_V 
												<S>
													OP.? (BE.SCI 30) 
													<S> OP.|-> OM_SS1 OM_D </S> 
													<S> OP.|-> OM_SS2 OM_D </S>
												</S>
								</S> OMS.IterCounter
							</S> OMS.TimeCounter
						</S>
					</S>
	</S>
</S>
};

St_ra000 := cStrategy
	oModule: OM_S, OM_V, OM_SS, OM_D;
	oChannel: OCh;
{
<S>
	OP.Cyc ( BE.LoopBnd 50 )
	<S>
		OP.|-> 	OM_S
					<S>
						OP.Cyc (BE.LoopBnd 7000)
						<S>
							OP.|->
							<S>
								OP.|->
								<S>
									OP.|->
									<S>
										OP.|->   OM_V
													<S> 
														OP.? (BE.LoopBnd 10)
														OM_SS
														<S> OP.Min OM_SS OCh (Ch1) </S>
													</S>
									</S> OM_D
								</S> OMS.IterCounter
							</S> OMS.TimeCounter
						</S>
					</S>
	</S>
</S>
};

St_sa000 := cStrategy
	oModule: OM_S, OM_V, OM_SS, OM_D;
	oChannel: OCh;
{
<S>
	OP.Cyc ( BE.LoopBnd 50 )
	<S>
		OP.|-> 	OM_S
					<S>
						OP.Cyc ( BE.AND ( BE.LoopBnd 5000 , BE.SCI 200 ) )
						<S>
							OP.|->
							<S>
								OP.|->
								<S>
									OP.|->
									<S>
										OP.|-> OM_V <S> OP.OSend (send_1) OM_SS </S>
									</S> OM_D
								</S> OMS.IterCounter
							</S> OMS.TimeCounter
						</S>
					</S>
	</S>
</S>
};

St_sb001 := cStrategy
	oModule: OM_S, OM_V, OM_SS1, OM_SS2, OM_D;
{
<S>
	OP.Cyc ( BE.LoopBnd 50 )
	<S>
		OP.|-> 	OM_S
					<S>
						OP.Cyc ( BE.LoopBnd 7000 )
						<S>
							OP.|->
							<S>
								OP.|->
								<S>
									OP.|-> 	OM_V 
												<S>
													OP.? (BE.SCI 30) 
													<S> OP.|-> <S> OP.OSend (send_1) OM_SS1 </S> OM_D </S> 
													<S> OP.|-> OM_SS2 OM_D </S> //<S> OP.|-> <S> OP.OSend (send_2) OM_SS2 </S> OM_D </S>
												</S>
								</S> OMS.IterCounter
							</S> OMS.TimeCounter							
						</S>
					</S>
	</S>
</S>
};

solver1 := solver
{
	cStrategy: St_b001;
	oModule: OM_S.PermRand, OM_V.AS, OM_SS.FirstImpr, OM_SS.Rand, OM_D.AlwImpr;
};

sender_solver := solver
{
	cStrategy: St_sb001;
	oModule: OM_S.PermRand, OM_V.AS, OM_SS.FirstImpr, OM_SS.Rand, OM_D.AlwImpr;
};

receiver_solver := solver
{
	cStrategy: St_ra000;
	oModule: OM_S.PermRand, OM_V.AS, OM_SS.FirstImpr, OM_D.AlwImpr;
	oChannel: OCh.DP;
};

connections:

[sender_solver.send_1] OP.--> [receiver_solver.Ch1] 2;
[solver1]2;
//[solver2]3;
