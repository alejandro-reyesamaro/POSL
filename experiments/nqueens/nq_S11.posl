St_s := cStrategy
    oModule: OM_S, OM_V, OM_SS, OM_D;
{
 <S>
     OP.|-> 	OM_S
             <S>
                 OP.Cyc ( BE.LoopBnd 10000 ) 
                 <S>
                     OP.|->
                     <S>
                         OP.|->
                         <S>
                             OP.|->
                             <S>
                                 OP.|-> OM_V OM_SS
                             </S>
                             <S>
                                 OP.? (BE.LoopBnd 10)
                                 OM_D
                                 <S> OP.OSend (send_1) OM_D </S>
                             </S>
                         </S> OMS.IterCounter
                     </S> OMS.TimeCounter
                 </S>
             </S>
 </S>
};

St_r := cStrategy
    oModule: OM_S, OM_V, OM_SS, OM_D;
    oChannel: OCh;
{
 <S>
     OP.|-> 	OM_S
             <S>
                 OP.Cyc ( BE.LoopBnd 10000 ) 
                 <S>
                     OP.|->
                     <S>
                         OP.|->
                         <S>
                             OP.|->
                             <S>
                                 OP.|-> OM_V OM_SS
                             </S>
                             <S>
                                 OP.? (BE.LoopBnd 5)
                                 <S> OP.Min OM_D OCh (Ch1) </S>
                                 OM_D
                             </S>
                         </S> OMS.IterCounter
                     </S> OMS.TimeCounter
                 </S>
             </S>
 </S>
};

sender := solver
{
        cStrategy: St_s;
        oModule: OM_S.PermRand, OM_V.ASP(80), OM_SS.FirstImpr, OM_D.AlwImpr;
};

receiver := solver
{
        cStrategy: St_r;
        oModule: OM_S.PermRand, OM_V.ASP(80), OM_SS.FirstImpr, OM_D.AlwImpr;
        oChannel: OCh.Sol_Last;
};

connections:

[sender.send_1] OP.--> [receiver.Ch1]20;
